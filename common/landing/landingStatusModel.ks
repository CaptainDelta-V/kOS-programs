@LAZYGLOBAL OFF.
RUNONCEPATH("1:common/nav").

FUNCTION LANDING_STATUS_MODEL {    
    PARAMETER TARGET_LANDING_SITE IS SHIP:GEOPOSITION.    
    PARAMETER TARGET_ALTITUDE IS 0.
    PARAMETER USE_POSITION_OVER_PREDICTED_TRAJECTORY IS FALSE.  

    LOCAL _LANDING_SITE TO TARGET_LANDING_SITE.
    LOCAL _TARGET_ALTITUDE TO TARGET_ALTITUDE.
    LOCAL _METERS_PER_DEGREE TO SHIP:BODY:RADIUS * 2 * CONSTANT:PI / 360.        
    
    FUNCTION GET_IMPACT {        
        IF USE_POSITION_OVER_PREDICTED_TRAJECTORY {
            // RETURN SHIP:GEOPOSITION:ALTITUDEPOSITION(POSITION_ALTITUDE).
            LOCAL LAT TO SHIP:GEOPOSITION:LAT.
            LOCAL LNG TO SHIP:GEOPOSITION:LNG.            
            RETURN LATLNG(LAT, LNG).
        }
        IF ADDONS:TR:HASIMPACT { 
            RETURN ADDONS:TR:IMPACTPOS. 
        }

        RETURN SHIP:GEOPOSITION.
    }

    FUNCTION GET_TARGET_ALTITUDE { 
        RETURN _TARGET_ALTITUDE.
    }

    FUNCTION SET_TARGET_ALTITUDE { 
        PARAMETER NEW_TARGET_ALTITUDE. 

        SET _TARGET_ALTITUDE TO NEW_TARGET_ALTITUDE.
    }
    
    FUNCTION LONGITUDE_ERROR {
        RETURN GET_IMPACT():LNG - _LANDING_SITE:LNG.
    }
    
    FUNCTION LATITUDE_ERROR {
        RETURN GET_IMPACT():LAT - _LANDING_SITE:LAT.
    }

    FUNCTION TRAJECTORY_ERROR_METERS { 
        RETURN ERROR_VECTOR():MAG.
    }

    FUNCTION POSITION_ERROR_METERS { 
        LOCAL LAT TO SHIP:GEOPOSITION:LAT.
        LOCAL LNG TO SHIP:GEOPOSITION:LNG.            
        RETURN (LATLNG(LAT, LNG):POSITION - _LANDING_SITE:POSITION):MAG.
    }

    FUNCTION SPEED_LATITUDE { 
        RETURN SHIP:VELOCITY:SURFACE:Z.
    }

    FUNCTION SPEED_LONGITUDE { 
        RETURN SHIP:VELOCITY:SURFACE:Y.
    }

    FUNCTION RETROGRADE_HEADING { 
        RETURN HEADING_OF_VECTOR(-SHIP:VELOCITY:SURFACE).
    }

    FUNCTION RETROGRADE_PITCH { 
        RETURN PITCH_OF_VECTOR(-SHIP:VELOCITY:SURFACE).
    }

    FUNCTION ERROR_VECTOR {

        // RETURN GET_IMPACT():ALTITUDE_POSITION(_TARGET_ALTITUDE) - TARGET_LANDING_SITE:ALTITUDEPOSITION(_TARGET_ALTITUDE).
        RETURN GET_IMPACT():POSITION - _LANDING_SITE:ALTITUDEPOSITION(_TARGET_ALTITUDE).
        // RETURN GET_IMPACT():POSITION - TARGET_LANDING_SITE:POSITION.
    }

    FUNCTION HEADING_FROM_IMPACT_TO_TARGET { RETURN HEADING_OF_VECTOR(-ERROR_VECTOR()). }

    FUNCTION ECCENTRICITY { RETURN SHIP:ORBIT:ECCENTRICITY. }

    FUNCTION OVERSHOOT {
        PARAMETER METERS IS 0.
        LOCAL OVERSHOOT_UNIT IS VXCL(UP:VECTOR, _LANDING_SITE:ALTITUDEPOSITION(_TARGET_ALTITUDE)):NORMALIZED.
        LOCAL OVERSHOOT_POSITION IS _LANDING_SITE:POSITION + METERS * OVERSHOOT_UNIT.

        RETURN LANDING_STATUS_MODEL(BODY:GEOPOSITIONOF(OVERSHOOT_POSITION), _TARGET_ALTITUDE).
    }

    FUNCTION OFFSET { 
        PARAMETER LAT_METERS. 
        PARAMETER LNG_METERS.

        LOCAL LAT_OFFSET TO LAT_METERS / _METERS_PER_DEGREE.
        LOCAL LNG_OFFSET TO LNG_METERS / _METERS_PER_DEGREE.

        LOCAL OFFSET_LAT TO _LANDING_SITE:LAT + LAT_OFFSET.
        LOCAL OFFSET_LNG TO _LANDING_SITE:LNG + LNG_OFFSET.    
        LOCAL OFFSET_POSITION TO LATLNG(OFFSET_LAT, OFFSET_LNG):POSITION.        

        RETURN LANDING_STATUS_MODEL(BODY:GEOPOSITIONOF(OFFSET_POSITION), _TARGET_ALTITUDE).
    }
    
    FUNCTION GET_LANDING_SITE { RETURN _LANDING_SITE. }

    FUNCTION SET_LANDING_SITE { 
        PARAMETER NEW_LANDING_SITE.

        SET _LANDING_SITE TO NEW_LANDING_SITE.
    }

    RETURN LEXICON(
        "GET_IMPACT", GET_IMPACT@,
        "GET_TARGET_ALTITUDE", GET_TARGET_ALTITUDE@, 
        "SET_TARGET_ALTITUDE", SET_TARGET_ALTITUDE@,
        "LONGITUDE_ERROR", LONGITUDE_ERROR@,
        "LATITUDE_ERROR", LATITUDE_ERROR@,
        "TRAJECTORY_ERROR_METERS", TRAJECTORY_ERROR_METERS@,
        "POSITION_ERROR_METERS", POSITION_ERROR_METERS@,
        "SPEED_LATITUDE", SPEED_LATITUDE@,
        "SPEED_LONGITUDE", SPEED_LONGITUDE@,
        "RETROGRADE_HEADING", RETROGRADE_HEADING@, 
        "RETROGRADE_PITCH", RETROGRADE_PITCH@,
        "ERROR_VECTOR", ERROR_VECTOR@,
        "HEADING_FROM_IMPACT_TO_TARGET", HEADING_FROM_IMPACT_TO_TARGET@,
        "ECCENTRICITY", ECCENTRICITY@,
        "OVERSHOOT", OVERSHOOT@,
        "OFFSET", OFFSET@,
        "GET_LANDING_SITE", GET_LANDING_SITE@,
        "SET_LANDING_SITE", SET_LANDING_SITE@
    ).
}