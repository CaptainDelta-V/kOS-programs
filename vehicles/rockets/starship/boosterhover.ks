@LAZYGLOBAL OFF.
WAIT UNTIL SHIP:UNPACKED.
RUNONCEPATH("constants").
RUNONCEPATH("../../../common/exceptions").
RUNONCEPATH("../../../common/constants").
RUNONCEPATH("../../../common/landing/sites").
RUNONCEPATH("../../../common/engineManager").
RUNONCEPATH("../../../common/flightStatus/flightStatusModel").
RUNONCEPATH("../../../common/landing/landingStatusModel").
RUNONCEPATH("../../../common/landing/landingSteeringModel").
RUNONCEPATH("../../../common/landing/landingBurnModel").
RUNONCEPATH("../../../common/landing/gridFinManager").
RUNONCEPATH("../../../common/landing/boostbackBurnController").
RUNONCEPATH("../../../common/infos").
RUNONCEPATH("../../../common/control").
RUNONCEPATH("../../../common/nav").
RUNONCEPATH("../../../common/launch/utils").
RUNONCEPATH("../../../common/booting/bootUtils").

LOCAL ENGINES TO SHIP:PARTSTAGGED("BOOSTER_RAPTORS")[0].
LOCAL ENGINE_MODULE TO ENGINES:GETMODULE("ModuleTundraEngineSwitch").
LOCAL ENGINE_MANAGEMENT TO ENGINE_MANAGER(ENGINE_MODULE, VESSEL_TYPE_SUPER_HEAVY_BOOSTER).

LOCAL TOWER_STATUS TO "NOT CONNECTED".
LOCAL LANDING_SITE IS LANDING_SITES[KEY_KSC_PAD_MAIN].

LOCAL LANDING_STATUS TO LANDING_STATUS_MODEL(LANDING_SITE).
LOCAL LANDING_STEERING TO LANDING_STEERING_MODEL(LANDING_SITE).

LOCAL FLIGHT_STATUS TO FLIGHT_STATUS_MODEL("SUPER HEAVY BOOSTER HOVER TEST").
LOCAL STARTOWER_CORE TO PROCESSOR(TOWER_CPU_NAME).

GET_LAUNCH_CONFIRMATION(FLIGHT_STATUS:GET_TITLE()).
RUN_FLIGHT_STATUS_SCREEN(FLIGHT_STATUS, 0.5).

WAIT 2.
LOCK THROTTLE TO 1.
ENGINE_MANAGEMENT:SET_ENGINE_STATE(TRUE).
ENGINE_MANAGEMENT:SET_ENGINE_MODE(ENG_MODE_MID_INR).

WAIT 3.
STARTOWER_CORE:CONNECTION:SENDMESSAGE(TOWER_RELEASE_MESSAGE).
WAIT 0.5.
STAGE.

///

DECLARE LOCAL CALC_THROTTLE TO .5.
LOCK THROTTLE TO CALC_THROTTLE.

LOCK STEERING TO LOOKDIRUP(UP:FOREVECTOR, HEADING(180, 0, 0):FOREVECTOR).

STAGE.

DECLARE LOCAL TARGETALT TO 143.
FLIGHT_STATUS:UPDATE("STARTING PID CONTROL. TARGETING: <color=""#ffffff"">" + TARGETALT + "</color>").

LOCAL KP TO .05.
LOCAL KI TO .08.
LOCAL KD TO .1.
LOCAL MIN_THROTT TO 0.1.
// LOCAL MAX_THROTT


// DECLARE LOCAL KP TO .05.
// DECLARE LOCAL KI TO .009.
// DECLARE LOCAL KD TO .8.

FLIGHT_STATUS:ADD_FIELD("PID:", "LOOP(" + KP + ", " + KI + "," + KD + ", .1, 1).").
DECLARE LOCAL PID TO PIDLOOP(KP, KI, KD, 0.05, 1).
SET PID:SETPOINT TO TARGETALT.


LOCAL HOVER_START TO FALSE. 
LOCAL CATCH_ALT TO 138.
LOCAL ALT_THRESHOLD TO 5. 

UNTIL HOVER_START { 
    SET HOVER_START TO ALTITUDE < CATCH_ALT.
    WAIT 0.                
}

LOCAL REQUEST_CATCH TO FALSE. 
LOCAL TOWER_VESSEL TO VESSEL(TOWER_VESSEL_NAME).

// UNTIL FALSE {
//     SET CALC_THROTTLE TO PID:UPDATE(TIME:SECONDS, SHIP:ALTITUDE). 
//     FLIGHT_STATUS:ADD_FIELD("ALT", { RETURN ROUND(SHIP:ALTITUDE, 2). }).

//     IF NOT REQUEST_CATCH AND (ALTITUDE < CATCH_ALT + ALT_THRESHOLD AND ALTITUDE > CATCH_ALT - ALT_THRESHOLD) { 
//         TOWER_VESSEL:CONNECTION:SENDMESSAGE(TOWER_CATCH_MESSAGE).
//         SET REQUEST_CATCH TO TOWER_VESSEL:CONNECTION:SENDMESSAGE(TOWER_CATCH_DAMPEN_MESSAGE).
//     }

//     WAIT 0.
// }




// IF VESSEL(TOWER_VESSEL_NAME):CONNECTION:SENDMESSAGE(TOWER_CATCH_MESSAGE) { 
//     FLIGHT_STATUS:ADD_FIELD("TOWER", "CATCHING"). 
// }
// ELSE { 
//     FLIGHT_STATUS:ADD_FIELD("TOWER", "FAIL STATE"). 
// }                       

// WAIT UNTIL FALSE. 