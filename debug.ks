RUNONCEPATH("common/infos").
RUNONCEPATH("common/flightStatus/flightStatusModel").
RUNONCEPATH("common/orbit/circularizationController").

SET DEBUG_OUT_FILE TO "logs/out.txt".
DELETEPATH(DEBUG_OUT_FILE).

LOG TARGET:GEOPOSITION TO DEBUG_OUT_FILE.

// LOCAL OLM TO SHIP:PARTSTAGGED("QD_ARM")[0]. 
// DESCRIBE_PART_ITEM_TO_FILE(OLM, DEBUG_OUT_FILE).

// LOCAL QD_ARM TO SHIP:PARTSTAGGED("QD_ARM")[0].
// // DESCRIBE_PART_ITEM_TO_FILE(MECHAZILLA, DEBUG_OUT_FILE).
// DESCRIBE_PART_ITEM_TO_FILE(QD_ARM, DEBUG_OUT_FILE).

// LOCAL LIFT TO SHIP:PARTSTAGGED("LIFT")[0].


// DESCRIBE_SUFFIXNAMES_TO_FILE(LIFT:GETMODULE("ModuleServo"), DEBUG_OUT_FILE).
// DESCRIBE_MODULE_TO_FILE(LIFT:GETMODULE("ModuleServo"), DEBUG_OUT_FILE).



// LIFT:GETMODULE("ModuleServo"):DOACTION("increase speed", 1).


// LOCAL CIRCULARIZATION TO CIRCULARIZATION_CONTROLLER(105_000).

// FUNCTION TEST_IT { 
//     RETURN "2".
// }

// DESCRIBE_SUFFIXNAMES_TO_FILE(TEST_IT).











// FUNCTION TEST_IT { 
//     FUNCTION INSIDE { 
//         RETURN 1.
//     }

//     // FUNCTION ANOTHER { 
//     //     RETURN "BS".
//     // }



//     // LOCAL FLIGHT_STATUS TO FLIGHT_STATUS_MODEL("TEST", "WAITING").

//     // DESCRIBE_SUFFIXNAMES_TO_FILE(INSIDE@).
//     // PRINT INSIDE@:HASSUFFIX("CALL").
//     // PRINT INSIDE@:HASSUFFIX("CALLDSLKJFSDLK").

//     // PRINT INSIDE@:TYPENAME().
//     // PRINT ANOTHER@:TYPENAME().
    
//     // PRINT INSIDE:SUFFIXNAMES.
//     // PRINT INSIDE:TYPENAME(). 
//     // PRINT ANOTHER:TYPENAME().

//     // DESCRIBE_SUFFIXNAMES_TO_FILE(INSIDE@).
//     // PRINT(INSIDE:SUFFIXNAMES()).
//     // PRINT(INSIDE:inheritance).
//     // PRINT(INSIDE:TYPENAME()).
//     // PRINT(INSIDE:TOSTRING()).
// }

// TEST_IT().
// RUNONCEPATH("common/landing/landingmodel").

// LOCAL METERS_PER_DEGREE TO SHIP:BODY:RADIUS * 2 * CONSTANT:PI / 360.    
// PRINT 10 * METERS_PER_DEGREE + "meters".



// // LOCAL ENGINES TO SHIP:PARTSTAGGED("BOOSTER_RAPTORS")[0].
// // DESCRIBE_PART_ITEM_TO_FILE(ENGINES, DEBUG_OUT_FILE).

// // LOCK MAXDECEL TO (SHIP:AVAILABLETHRUST / SHIP:MASS) - G.	

// // PRINT SHIP:availablethrust.

// // LOCAL MECHAZILLA TO SHIP:PARTSTAGGED("MECH_ARMS")[0].
// // DESCRIBE_PART_ITEM_TO_FILE(MECHAZILLA, DEBUG_OUT_FILE).

// // LOCAL SLE_CONTROLLER TO MECHAZILLA:GETMODULE("ModuleSLEController").
// // DESCRIBE_SUFFIXNAMES_TO_FILE(SLE_CONTROLLER, DEBUG_OUT_FILE).
// // DESCRIBE_SUFFIXNAMES_TO_FILE(MECHAZILLA:MODULES, DEBUG_OUT_FILE).

// // LOCAL GRID_FINS TO SHIP:PARTSTAGGED("GRID_FIN").
// // // // PRINT GRID_FINS[0].
// // // PRINT GRID_FINS[3][].

// // DESCRIBE_PART_ITEM_TO_FILE(GRID_FINS[0], DEBUG_OUT_FILE).

// // GRID_FINS[0]:GETMODULE("ModuleControlSurface"):DOACTION("activate roll control", TRUE).
// // GRID_FINS[0]:GETMODULE("ModuleControlSurface"):DOACTION("activate pitch control", TRUE).
// // GRID_FINS[0]:GETMODULE("ModuleControlSurface"):DOACTION("activate yaw control", TRUE).



// // LOCAL LANDINGSITE TO  LANDINGSITE IS LANDING_SITES[KEY_KSC_LNDG_ZONE_WEST].
// // LATLNG(-0.2054109, -74.473228).
// PARAMETER LANDING_SITE TO SHIP:VELOCITY:SURFACE.
// LOG LANDING_SITE TO "logs/site.txt".

// // SET ENGINES TO SHIP:PARTSTAGGED("BOOSTER_RAPTORS")[0].

// // DESCRIBE_PART_ITEM_TO_FILE(ENGINES, "logs/out.txt").
// // DESCRIBE_SUFFIXNAMES_TO_FILE(ENGINES, "logs/out.txt").

// PRINT "PREPARING TO LAUNCH".
// WAIT 1.
// LOCK THROTTLE TO 1.
// STAGE.
// WAIT UNTIL FALSE. 

// FUNCTION PRINT_STATUS { 
//     CLEARSCREEN.
//     PRINT TITLE.
//     PRINT "FLIGHT STATUS: " + FLIGHT_STATUS.
//     PRINT "TOWER:: " + TOWER_STATUS.
//     PRINT "TARGET: " + LANDING_MODEL:GETSITE().
//     PRINT "LAT ERR: " + ROUND(LANDING_MODEL:LAT_ERR(), 2).
//     PRINT "LNG ERR: " + ROUND(LANDING_MODEL:LNG_ERR(), 2).
//     PRINT "TGT ERR: " + ROUND(LANDING_MODEL:TOT_ERR_MTRS(), 1) + "m".
//     PRINT "TRUE TGT ERR: " + ROUND(TRUE_LANDING_MODEL:TOT_ERR_MTRS(), 1) + "m".
//     PRINT "POS ERR: " + ROUND(LANDING_MODEL:POS_ERR_MTRS(), 1) + "m".
//     PRINT "ERR VECT: " + LANDING_MODEL:ERR_VECT().
//     PRINT "ERR VECT HDG: " + HEADING_OF_VECTOR(LANDING_MODEL:ERR_VECT()).
//     PRINT "ERR VECT PITCH: " + PITCH_OF_VECTOR(LANDING_MODEL:ERR_VECT()).
//     PRINT "HVEL VECT: " + HORIZONTAL_VELOCITY_VECTOR.
//     PRINT "MAX AOA: " + ROUND(MAX_AOA, 2).    
//     PRINT "IMPACT TIME: " + ROUND(IMPACT_TIME, 1).
//     PRINT "AVAL THRUST: " + ROUND(MAX_THRUST_ACTUAL,1) + " MAX DECEL: " + ROUND(MAXDECEL) + " STOPDIST: " + ROUND(STOPDIST, 2).
//     PRINT "ECC: " + ROUND(OBT:ECCENTRICITY, 6).
//     PRINT "ACCEL TOT: " + ROUND(ACCEL_TOT,3).    
//     PRINT "VERT SPEED: " + ROUND(SHIP:VERTICALSPEED, 1).
//     PRINT "VELOCITY: " + SHIP:VELOCITY:SURFACE.
//     PRINT "VELOCITY MAG: " + SHIP:VELOCITY:SURFACE:MAG.
//     PRINT "HORIZ SPEED | LAT: " + ROUND(SPEED_LAT, 2) + " LNG: " + ROUND(SPEED_LNG, 2).
//     PRINT "RETROGRADE PITCH: " + ROUND(RETROGRADE_PITCH,2).
//     PRINT "RETROGRADE HEADING: " + ROUND(RETROGRADE_HEADING, 2).    
//     PRINT "ALTITUDE: " + ROUND(ALTITUDE, 0).
//     PRINT "TRUE RADAR: " + ROUND(TRUE_RADAR, 0).
// }
